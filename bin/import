#!/usr/bin/env node

const { program } = require("commander");
const elasticsearch = require("../lib/elasticsearch");
const fs = require("fs");
const pathIsInside = require("path-is-inside");
const walklib = require("walk");
const extractTitle = require("../lib/extract-title");
const { join, relative, resolve } = require("path");

program
  .description(
    "Import one or more files or directories in public/data. Will import everything if not given any arguments.."
  )
  .usage("[<file | directory> [...]]")
  .option(
    "-d, --basedir <path>",
    "Set the path to public/data",
    join(__dirname, "../public/data")
  );

program.parse();

const basedir = resolve(program.opts().basedir);
if (!basedir) {
  console.error("✗ --basedir is required");
  process.exit(1);
}
console.log(`Base directory is ${basedir}`);

async function upload(path) {
  try {
    const title = await extractTitle(path);
    await elasticsearch.upload(basedir, path, title);
    console.log(`→ ${relative(basedir, path)}`, `→ ${title}`);
  } catch (err) {
    console.error("✗", err);
  }
}

function walk(dir, fn) {
  return new Promise((resolve, reject) => {
    let paths = [];
    let walker = walklib.walk(dir, { followLinks: true });
    walker.on("file", (root, stat, next) => {
      if (/\.txt$/i.test(stat.name)) paths.push(join(root, stat.name));
      else console.log(`▲ Ignoring non-text path: ${stat.name}`);
      next();
    });
    walker.on("errors", (root, stat, next) => {
      stats.forEach((stat) => {
        console.error(`✗ Error for ${stat.name}: ${stat.error}`);
      });
      next();
    });
    walker.on("end", () => {
      resolve(paths);
    });
  });
}

(async function () {
  try {
    let args = program.args.length > 0 ? program.args : [basedir];
    for (let arg of args) {
      let path = resolve(arg);
      if (!fs.existsSync(path)) path = join(resolve(basedir), arg);
      if (!fs.existsSync(path))
        throw new Error(`Can't find ${arg} here or in ${basedir}`);
      if (!pathIsInside(path, basedir))
        throw new Error(`Path ${arg} must be within ${basedir}`);
      if (fs.statSync(path).isDirectory()) {
        let paths = await walk(path);
        for (let p of paths) {
          await upload(p);
        }
      } else {
        await upload(path);
      }
    }
    console.log("✓ Done!");
  } catch (err) {
    console.error("✗", err.toString());
    process.exit(1);
  }
})();
